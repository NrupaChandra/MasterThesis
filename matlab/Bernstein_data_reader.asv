% Load the levelSet data
load('C:\Git\MasterThesis\matlab\levelSet.mat', 'levelSet');

% Load the nodes and weights data
load('C:\Git\MasterThesis\matlab\nodes_x_with_id.mat', 'nodes_x_with_id');
load('C:\Git\MasterThesis\matlab\nodes_y_with_id.mat', 'nodes_y_with_id');
load('C:\Git\MasterThesis\matlab\weights_with_id.mat', 'weights_with_id');

% Define the range of x and y
x = linspace(-1, 1, 100);  % 100 points from -1 to 1
y = linspace(-1, 1, 100);  % 100 points from -1 to 1

% Create a meshgrid for plotting
[X, Y] = meshgrid(x, y);

% Randomly select 5 indices from the levelSet matrix
numPlots = 5;
randomIndices = randperm(numel(levelSet), numPlots);

% Define folder to save plots
outputFolder = 'C:\Git\MasterThesis\matlab\plots';  %  folder path
if ~exist(outputFolder, 'dir')
    mkdir(outputFolder);  % Create folder if it doesn't exist
end

% Loop over the randomly selected level set expressions
for i = 1:numPlots
    % Get the randomly selected level set expression and its ID
    levelSetStruct = levelSet{randomIndices(i)};
    expr = levelSetStruct.Expression;
    levelSetID = levelSetStruct.ID;
    
    % Evaluate the expression for each point on the grid
    Z = zeros(size(X));  % Initialize the Z matrix (value of expression)
    
    for row = 1:numel(X)
        % Extract x and y values from the grid
        xi = X(row);
        yi = Y(row);
        
        % Calculate the value of the expression at this (xi, yi)
        Z(row) = double(subs(expr, {'x', 'y'}, {xi, yi}));  % Evaluate symbolically
    end
    
    % Create a new figure for each plot
    figure;
    
    % Plot the level set expression (contour plot)
    contour(X, Y, Z, [0, 0], 'LineWidth', 2);  % Plot the 0-level curve (interphase)
    
    % Overlay the nodes for the current level set ID
    % Find the indices of nodes corresponding to the current level set ID
    nodeIndices = find([nodes_x_with_id.ID] == levelSetID);
    
    % Plot the nodes (x, y) with weights influencing the size or color
    if ~isempty(nodeIndices)
        node_x = nodes_x_with_id(nodeIndices).x;
        node_y = nodes_y_with_id(nodeIndices).y;
        node_weights = weights_with_id(nodeIndices).weights;
        
        % Example: Scatter nodes, size scaled by weight
        scatter(node_x, node_y, 50, node_weights, 'filled');  % Adjust '50' for marker size
    end
    
    % Customize the plot
    title(['Level Set Expression ID ' num2str(levelSetID)]);
    xlabel('x');
    ylabel('y');
    axis equal;
    xlim([-1 1]);
    ylim([-1 1]);
    grid on;
    
    % Save the plot as a PNG file with the ID in the filename
    plotFileName = fullfile(outputFolder, ['levelSet_plot_ID_' num2str(levelSetID) '.png']);
    saveas(gcf, plotFileName);
end
